class Tetris {
    field Array board;
    field int columnCount;
    field int rowCount;
    field Piece falling;
    field boolean gameRunning;
    field int gameTime;
    field String s;

    static int KEYLEFT;
    static int KEYRIGHT;
    static int KEYSPACE;
    static int KEYDOWN;

    function void init() {
        let KEYLEFT = 130;
        let KEYRIGHT = 132;
        let KEYSPACE = 32;
        let KEYDOWN = 133;
        return;
    }

    constructor Tetris new() {
        var int i, j;
        var Array row;
        let columnCount = 10;
        let rowCount = 22;
        let board = Array.new(rowCount);
        let gameTime = 0;

        let i = 0;
        while (i < rowCount) {
            let row = Array.new(columnCount);
            let board[i] = row;
            let j = 0;
            while (j < columnCount) {
                let row[j] = false;
                let j = j + 1;
            }
            let i = i + 1;
        }

        do drawBoard();
        return this;
    }

    method void dispose() {
        var int i;
        var Array row;
        let i = 0;
        while (i < rowCount) {
            let row = board[i];
            do row.dispose();
            let i = i + 1;
        }
        do Memory.deAlloc(this);
        return;
    }

    method void drawBoard() {
        var int i, j, x, y;
        var Array row;

        do Screen.clearScreen();

        // board
        //do Output.printInt(gameTime);
        do Screen.drawLine(191, 15, 311, 15);
        do Screen.drawLine(191, 15, 191, 255);
        do Screen.drawLine(311, 15, 311, 255);
        do Screen.drawLine(191, 255, 311, 255);

        // boxes
        let i = 0;
        while (i < (rowCount-2)) {
            let row = board[i];

            let j = 0;
            while (j < columnCount) {
                if (row[j]) {
                    do drawBlock(i, j);
                }
                let j = j + 1;
            }

            let i = i + 1;
        }

        // falling
        if (falling = null) {
            return;
        }

        do drawFalling(false);
        return;
    }

    method void drawBlock(int row, int col) {
        var int x, y;
        //do Output.moveCursor(0,0);
        //do Output.printInt(row);
        //do Output.println();
        //do Output.printInt(col);
        //do Output.println();
        if (row > (rowCount-3)) {
            return;
        }

        let y = 255 - (row * 12);
        let x = 192 + (col * 12);
        do Screen.drawRectangle(x, y-10, x+10, y);
        return;
    }

    method void run() {
        var int key, prevKey;

        let falling = getRandomPiece();
        let gameRunning = true;
        let prevKey = 0;
        while (gameRunning) {
            let key = Keyboard.keyPressed();
            if (~(key = prevKey)) {
                // TODO: handle moving against wall
                do drawFalling(true);
                if (key = KEYLEFT) {
                    do falling.moveLeft();
                    if (collides()) {
                        do falling.moveRight();
                    }
                }
                if (key = KEYRIGHT) {
                    do falling.moveRight();
                    if (collides()) {
                        do falling.moveLeft();
                    }
                }
                if (key = KEYSPACE) {
                    do falling.rotate();
                    if (collides()) {
                        do falling.rotateBack();
                    }
                }
                if (key = KEYDOWN) {
                    do falling.moveDown();
                    if (collides()) {
                        do handleDownwardCollision();
                    }
                }
            }
            if (Util.mod(gameTime, 50) = 0) {
                do drawFalling(true);
                do falling.moveDown();
                if (collides()) {
                    do handleDownwardCollision();
                }
            }
            do drawFalling(false);

            // do drawBoard();
            let gameTime = gameTime + 1;
            let prevKey = key;
            //do Output.printInt(gameTime);
            //do Output.println();
        }
        do Output.printString("Game Over");
        return;
    }

    method boolean collides() {
        var Stack positions; 
        var Position pos;

        let positions = falling.computePositions();
        let pos = positions.pop();
        while (~(pos = null)) {
            let s = "occupied ";
            do Output.printString(s);
            do s.dispose();
            do Output.printInt(pos.r());
            let s = "         ";
            do Output.printString(s);
            do s.dispose();
            do Output.println();

            if (occupied(pos)) {
                do pos.dispose();
                do positions.dispose();
                return true;
            }
            do pos.dispose();
            let pos = positions.pop();
        }
        do positions.dispose();

        return false;
    }

    method void drawFalling(boolean erase) {
        var Stack positions;
        var Position pos;

        do Screen.setColor(~erase);
        let positions = falling.computePositions();
        let pos = positions.pop();
        while (~(pos = null)) {
            do drawBlock(pos.r(), pos.c());
            do pos.dispose();
            let pos = positions.pop();
        }
        do positions.dispose();
        return;
    }

    method boolean occupied(Position pos) {
        var Array row;
        if (pos.r() < 0) {
            return true;
        }
        if (pos.r() > (rowCount-1)) {
            return false;
        }
        let row = board[pos.r()];
            let s = "occupied2 ";
            do Output.printString(s);
            do s.dispose();
            do Output.printInt(pos.r());
            let s = "         ";
            do Output.printString(s);
            do s.dispose();
            do Output.println();

        return row[pos.c()];
    }

    method void handleDownwardCollision() {
        do Output.printString("Downward collision");
        do Output.println();
        do falling.moveUp();
        do freeze();
        do wipeConnectedRows();
        if (topRowOccupied()) {
            let gameRunning = false;
        }
        return;
    }

    method void wipeConnectedRows() {
        var int r;
        let r = 0;
        while (r < rowCount) {
            if (isConnected(r)) {
                do wipeRow(r);
            } else {
                let r = r + 1;
            }
        }
        return;
    }

    method boolean isConnected(int r) {
        var int c;
        var Array row;
        let c = 0;
        let row = board[r];
        while (c < columnCount) {
            if (row[c] = false) {
                return false;
            }
            let c = c + 1;
        }
        return true;
    }

    method void wipeRow(int r) {
        var Array thisRow;
        var Array nextRow;
        var int c;

        while (r < (rowCount-1)) {
            let thisRow = board[r];
            let nextRow = board[r+1];
            let c = 0;

            while (c < columnCount) {
                let thisRow[c] = nextRow[c];
                let c = c + 1;
            }
            let r = r + 1;
        }

        let c = 0;
        while (c < columnCount) {
            let nextRow[c] = false;
            let c = c + 1;
        }

        do drawBoard();
        return;
    }

    method Piece getRandomPiece() {
        return Piece.new(Random.getNumber(0, 6));
    }

    method void freeze() {
        var Stack positions;
        var Position pos;
        var Array row;

        let positions = falling.computePositions();
        let pos = positions.pop();
        while (~(pos = null)) {
            // do Output.printString("freeze ");
            // do Output.printInt(pos.r());
            // do Output.printString("     ");
            // do Output.println();
            let row = board[pos.r()];
            let row[pos.c()] = true;
            do pos.dispose();
            let pos = positions.pop();
        }
        do positions.dispose();
        do drawFalling(false);
        do falling.dispose();
        let falling = getRandomPiece();
        return;
    }

    method boolean topRowOccupied() {
        var Array row;
        var int j;
        let row = board[rowCount-1];
        let j = 0;
        while (j < columnCount) {
            if (row[j]) {
                return true;
            }
            let j = j + 1;
        }

        return false;
    }
}
