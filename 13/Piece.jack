class Piece {
    static Array type2matrices;
    static Array type2variants;
    field int type;
    field int variant;
    field int x;
    field int y;

    function void init() {
        let type2variants = Array.new(7);
        let type2variants[0] = 1;
        let type2variants[1] = 2;
        let type2variants[2] = 2;
        let type2variants[3] = 2;
        let type2variants[4] = 4;
        let type2variants[5] = 4;
        let type2variants[6] = 4;

        let type2matrices = Array.new(7);
        let type2matrices[0] = Piece.buildO();
        let type2matrices[1] = Piece.buildI();
        let type2matrices[2] = Piece.buildS();
        let type2matrices[3] = Piece.buildZ();
        let type2matrices[4] = Piece.buildL();
        let type2matrices[5] = Piece.buildJ();
        let type2matrices[6] = Piece.buildT();
        return;
    }

    function Array buildO() {
        var Array ms, m0;
        let ms = Array.new(1);
        let m0 = Array.new(4);

        let m0[0] = 0;
        let m0[1] = 6;
        let m0[2] = 6;
        let m0[3] = 0;
        let ms[0] = m0;

        return ms;
    }

    function Array buildI() {
        var Array ms, m0, m1;
        let ms = Array.new(1);
        let m0 = Array.new(4);
        let m1 = Array.new(4);

        let m0[0] = 0;
        let m0[1] = 15;
        let m0[2] = 0;
        let m0[3] = 0;
        let ms[0] = m0;

        let m1[0] = 4;
        let m1[1] = 4;
        let m1[2] = 4;
        let m1[3] = 4;
        let ms[1] = m1;

        return ms;
    }

    function Array buildS() {
        var Array ms, m0, m1;
        let ms = Array.new(1);
        let m0 = Array.new(4);
        let m1 = Array.new(4);

        let m0[0] = 0;
        let m0[1] = 12;
        let m0[2] = 6;
        let m0[3] = 0;
        let ms[0] = m0;

        let m1[0] = 4;
        let m1[1] = 12;
        let m1[2] = 8;
        let m1[3] = 0;
        let ms[1] = m1;

        return ms;
    }

    function Array buildZ() {
        var Array ms, m0, m1;
        let ms = Array.new(1);
        let m0 = Array.new(4);
        let m1 = Array.new(4);

        let m0[0] = 0;
        let m0[1] = 6;
        let m0[2] = 12;
        let m0[3] = 0;
        let ms[0] = m0;

        let m1[0] = 8;
        let m1[1] = 12;
        let m1[2] = 4;
        let m1[3] = 0;
        let ms[1] = m1;

        return ms;
    }

    function Array buildL() {
        var Array ms, m0, m1, m2, m3;
        let ms = Array.new(1);
        let m0 = Array.new(4);
        let m1 = Array.new(4);
        let m2 = Array.new(4);
        let m3 = Array.new(4);

        let m0[0] = 0;
        let m0[1] = 14;
        let m0[2] = 2;
        let m0[3] = 0;
        let ms[0] = m0;

        let m1[0] = 4;
        let m1[1] = 4;
        let m1[2] = 12;
        let m1[3] = 0;
        let ms[1] = m1;

        let m2[0] = 8;
        let m2[1] = 14;
        let m2[2] = 0;
        let m2[3] = 0;
        let ms[2] = m2;

        let m3[0] = 6;
        let m3[1] = 4;
        let m3[2] = 4;
        let m3[3] = 0;
        let ms[3] = m3;

        return ms;
    }

    function Array buildJ() {
        var Array ms, m0, m1, m2, m3;
        let ms = Array.new(1);
        let m0 = Array.new(4);
        let m1 = Array.new(4);
        let m2 = Array.new(4);
        let m3 = Array.new(4);

        let m0[0] = 0;
        let m0[1] = 14;
        let m0[2] = 8;
        let m0[3] = 0;
        let ms[0] = m0;

        let m1[0] = 12;
        let m1[1] = 4;
        let m1[2] = 4;
        let m1[3] = 0;
        let ms[1] = m1;

        let m2[0] = 2;
        let m2[1] = 14;
        let m2[2] = 0;
        let m2[3] = 0;
        let ms[2] = m2;

        let m3[0] = 4;
        let m3[1] = 4;
        let m3[2] = 6;
        let m3[3] = 0;
        let ms[3] = m3;

        return ms;
    }

    function Array buildT() {
        var Array ms, m0, m1, m2, m3;
        let ms = Array.new(1);
        let m0 = Array.new(4);
        let m1 = Array.new(4);
        let m2 = Array.new(4);
        let m3 = Array.new(4);

        let m0[0] = 0;
        let m0[1] = 14;
        let m0[2] = 4;
        let m0[3] = 0;
        let ms[0] = m0;

        let m1[0] = 4;
        let m1[1] = 12;
        let m1[2] = 4;
        let m1[3] = 0;
        let ms[1] = m1;

        let m2[0] = 4;
        let m2[1] = 14;
        let m2[2] = 0;
        let m2[3] = 0;
        let ms[2] = m2;

        let m3[0] = 4;
        let m3[1] = 6;
        let m3[2] = 4;
        let m3[3] = 0;
        let ms[3] = m3;

        return ms;
    }

    // http://colinfahey.com/tetris/tetris_diagram_pieces_orientations_new.jpg
    function Piece new(typ) {
        let type = typ;
        let variant = Random.getNumber(0, type2variants[typ]-1);
        let x = 5;
        let y = 22;
        return this;
    }

    method void dispose() {
        return;
    }

    method void rotate() {
        let variant = variant + 1;
        if (variant = type2variants[type]) {
            let variant = 0;
        }
        return;
    }

    method void rotateBack() {
        let variant = variant - 1;
        if (variant = -1) {
            let variant = type2variants[type]-1;
        }
        return;
    }

    method void moveDown() {
        let y = y - 1;
        return;
    }

    method void moveUp() {
        let y = y + 1;
        return;
    }

    method void moveLeft() {
        let x = x - 1;
        return;
    }

    method void moveRight() {
        let x = x + 1;
        return;
    }

    method Array computePositions() {
        // TODO
        return;
    }
}
