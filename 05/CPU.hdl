// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Or16(a=instruction, b=false, out[15]=Cins,
                                 out[12]=CA,
                                 out[11]=C1,
                                 out[10]=C2,
                                 out[9]=C3,
                                 out[8]=C4,
                                 out[7]=C5,
                                 out[6]=C6,
                                 out[5]=D1,
                                 out[4]=D2,
                                 out[3]=D3,
                                 out[2]=J1,
                                 out[1]=J2,
                                 out[0]=J3);

    Not(in=Cins, out=Ains);
    Mux16(a=Out, b=instruction, sel=Ains, out=OutOrA);

    And(a=Cins, b=D1, out=WriteA);
    And(a=Cins, b=D2, out=WriteD);
    And(a=Cins, b=D3, out=writeM);

    Or(a=WriteA, b=Ains, out=LoadA);
    ARegister(in=OutOrA, load=LoadA, out=OutA);
    Or16(a=OutA, b=false, out[0..14]=addressM);

    Mux16(a=OutA, b=inM, sel=CA, out=OutAM);

    ALU(x=OutD, y=OutAM, zx=C1, nx=C2, zy=C3, ny=C4, f=C5, no=C6, out=Out, zr=Zr, ng=Ng);
    Or16(a=Out, b=false, out=outM);

    DRegister(in=Out, load=WriteD, out=OutD);

    And(a=J1, b=Ng, out=JLT);
    And(a=J2, b=Zr, out=JEQ);
    Or(a=Zr, b=Ng, out=NotPositive);
    Not(in=NotPositive, out=Positive);
    And(a=J3, b=Positive, out=JGT);
    Or(a=JLT, b=JEQ, out=JLE);
    Or(a=JLE, b=JGT, out=JMP);
    And(a=instruction[15], b=JMP, out=LoadPC);
    PC(in=OutA, reset=reset, load=LoadPC, inc=true, out[0..14]=pc);
}
