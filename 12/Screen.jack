// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * Graphic screen library.
 */
class Screen {
    static boolean color;
    static Array twoToThe;

    /** Initializes the Screen. */
    function void init() {
        let color = true;
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let j = 1;
        while (j < 16) {
            let twoToThe[j] = twoToThe[j-1]+twoToThe[j-1];
            let j = j + 1;
        }
        return;
    }

    /** Erases the whole screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while (i < 8192) {
            do Memory.poke(16384 + i, 0);
            let i = i + 1;
        }
        return;
    }

    /** Sets the color to be used in further draw commands
     *  where white = false, black = true. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x, y) pixel. */
    function void drawPixel(int x, int y) {
        let bitR = y;
        let bitC = x / 16;
        let bit = x - (x * 16);
        let address = 16384 + (bitR * 32) + bitC;
        let line = Memory.peek(address);
        let mask = ~twoToThe[bit];
        if (color) {
            let line = (line & mask) | twoToThe[bit];
        } else {
            let line = ~(~(line & mask) | mask);
        }
        do Memory.poke(address, line);
        return;
    }

    /** Draws a line from (x1, y1) to (x2, y2). */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, a, b, adyMinusbdx, sign;
        if (x1 < x2) {
            do Screen.drawLine(x2, y2, x1, y1);
            return;
        }

        let dx = x2 - x1;
        let dy = y2 - y1;
        let a = 0;
        let b = 0;

        if (dx = 0) {
            while (~(b = dy)) {
                do Screen.drawPixel(x1, y1+b);
                let a = a + 1;
            }
        }

        let sign = 1;
        if (dy < 0) {
            let sign = -1;
        }
        while (~((a = dx) & (b = dy))) {
            do Screen.drawPixel(x1+a, y1+b);
            if (adyMinusbdx < 0) {
                let a = a + 1;
                let adyMinusbdx = adyMinusbdx + dy;
            } else {
                let b = b + sign;
                let adyMinusbdx = adyMinusbdx - dx;
            }
        }
        return;
    }

    /** Draws a filled rectangle where the top left corner
     *  is (x1, y1) and the bottom right corner is (x2, y2). */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int x, y;
        let y = y1;
        while (y < (y2+1)) {
            let x = x1;
            while (x < (x2+1)) {
                do Screen.drawPixel(x, y);
                let x = x + 1;
            }
            let y = y + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r around (cx, cy). */
    function void drawCircle(int cx, int cy, int r) {
    }
}
