// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * Memory operations library.
 */ 
class Memory {
    static int freeList;

    /** Initializes memory parameters. */
    function void init() {
        var Array memory;
        let freeList = 2048;
        let memory[freeList] = 16383 - 2048; // length of heap
        let memory[freeList+1] = null;       // next freeList
        return;
    }

    /** Returns the value of the main memory at the given address. */
    function int peek(int address) {
        var Array memory;
        let memory = 0;
        return memory[address];
    }

    /** Sets the value of the main memory at this address
     *  to the given value. */
    function void poke(int address, int value) {
        var Array memory;
        let memory = 0;
        let memory[address] = value;
        return;
    }

    /** finds and allocates from the heap a memory block of the 
     *  specified size and returns a reference to its base address. */
    function int alloc(int size) {
        var int next, prev;
        var Array memory;
        
        if (memory[freeList] > size) {
            let next = freeList;

            if (memory[freeList] > (size + 4)) {
                let freeList = freeList + size + 1;
                let memory[freeList] = memory[next] - size - 1;
                let memory[freeList+1] = memory[next+1];
                let memory[next] = size + 1;
            } else {
                let freeList = memory[freeList+1];
            }
            return next + 1;
        }

        let prev = freeList;
        let next = memory[freeList+1];
        while (memory[next] < size+1) {
            let prev = next;
            let next = memory[next+1];
        }

        // enough to split this block into 2
        if (memory[next] > (size + 4)) {
            let memory[prev+1] = next + size + 1;
            let memory[next+size+1] = memory[next] - size - 1;
            let memory[next+size+2] = memory[next+1];
            let memory[next] = size + 1;
            return next + 1;
        }

        let memory[prev+1] = memory[next+1];
        return next + 1;
    }

    /** De-allocates the given object and frees its space. */
    function void deAlloc(int object) {
        var int block, prev, next;
        var Array memory;
        let block = object - 1;

        if (block < freeList) {
            let memory[block+1] = freeList;
            let freeList = block;
            return;
        }

        let prev = freeList;
        let next = memory[freeList+1];
        while (~(next = 0 | next > block)) {
            let prev = next;
            let next = memory[next+1];
        }

        let memory[prev+1] = block;
        let memory[block+1] = next;
        return;
    }    
}
